@{
    ViewData["Title"] = "تقویم وظایف";
}

<h2>تقویم وظایف</h2>

<!-- لینک به فایل‌های استایل persian-datepicker -->
<link rel="stylesheet" href="https://babakhani.github.io/PersianWebToolkit/beta/lib/persian-datepicker/dist/css/persian-datepicker.css" />

<!-- ایجاد دو بخش: یک بخش برای تقویم و یکی برای نمایش لیست پرونده‌ها -->
<div style="display: flex;">
    <!-- لیست پرونده‌ها در سمت چپ صفحه -->
    <div id="caseList" style="flex: 1; margin-right: 20px; background-color: #f4f4f4; padding: 20px; border-radius: 8px;">
        <h3>لیست پرونده‌ها</h3>
        <!-- پرونده‌ها در اینجا نمایش داده می‌شوند -->
    </div>

    <!-- بخش تقویم وظایف در سمت راست صفحه -->
    <div id="datepicker" style="flex: 2; background-color: #fff; padding: 20px; border-radius: 8px;"></div>
</div>

<div id="taskList"></div> <!-- اینجا لیست وظایف نمایش داده می‌شود -->

@section Scripts {
        <script src="https://code.jquery.com/jquery-2.2.4.min.js"></script>
        <script src="https://babakhani.github.io/PersianWebToolkit/beta/lib/persian-date/dist/persian-date.js"></script>
        <script src="https://babakhani.github.io/PersianWebToolkit/beta/lib/persian-datepicker/dist/js/persian-datepicker.js"></script>

        <script src="https://cdn.jsdelivr.net/npm/@@microsoft/signalr@7.0.12/dist/browser/signalr.min.js"></script>

        <script>
            $(document).ready(function () {
                // ساخت اتصال SignalR
                const connection = new signalR.HubConnectionBuilder()
                    .withUrl("/supportHub") // آدرس Hub
                    .build();

                // شروع اتصال SignalR
                connection.start().catch(function (err) {
                    return console.error(err.toString());
                });

                // تقویم تاریخ فارسی
                $('#datepicker').persianDatepicker({
                    inline: true,
                    format: 'YYYY/MM/DD',
                    onSelect: function (unixDate) {
                        const selectedDate = new Date(unixDate).toISOString().split('T')[0];

                        // درخواست دریافت وظایف برای تاریخ مشخص
                        $.ajax({
                            url: '@Url.Action("GetTasks", "Tasks")', // مسیر به‌روز شده برای متد GetTasks
                            type: 'GET',
                            data: { date: selectedDate },
                            success: function (tasks) {
                                console.log("Tasks:", tasks);  // نمایش داده‌های دریافت شده در کنسول
                                $('#taskList').empty();
                                if (tasks.length > 0) {
                                    tasks.forEach(task => {
                                        console.log("TaskId:", task.taskId);  // نمایش taskId در کنسول
                                        $('#taskList').append(`
                                            <div class="task-item">
                                                <span>${task.title}</span>
                                                <span>${task.isDone ? "انجام شده" : "در انتظار"}</span>
                                                <input type="checkbox" ${task.isDone ? 'checked' : ''} onchange="updateTaskStatus(${task.taskId}, this.checked)">
                                                <!-- دکمه بررسی وظیفه -->
                                                <button onclick="viewTaskMessages(${task.taskId})">بررسی وظیفه</button>
                                                <!-- نمایش ساعت شروع و پایان -->
                                                <div>
                                                    <span><strong>ساعت شروع:</strong> ${task.startTime ? task.startTime : "مشخص نشده"}</span>
                                                    <span><strong>ساعت پایان:</strong> ${task.endTime ? task.endTime : "مشخص نشده"}</span>
                                                </div>
                                            </div>
                                        `);
                                    });
                                } else {
                                    $('#taskList').append('<p>هیچ وظیفه‌ای برای این تاریخ وجود ندارد.</p>');
                                }
                            },
                            error: function () {
                                $('#taskList').html('<p>خطایی رخ داده است. لطفا دوباره تلاش کنید.</p>');
                            }
                        });
                    }
                });

                // دریافت پرونده‌ها
                $.ajax({
                    url: '@Url.Action("GetCases", "Task")', // مسیر به‌روز شده برای متد GetCases
                    type: 'GET',
                    success: function (cases) {
                        $('#caseList').empty();
                        if (cases && cases.length > 0) {
                            cases.forEach(caseItem => {
                                $('#caseList').append(`
                                    <div class="case-item" style="margin-bottom: 15px; padding: 10px; background-color: #fff; border: 1px solid #ccc; border-radius: 4px;">
                                        <span><strong>عنوان پرونده:</strong> ${caseItem.title}</span><br>
                                        <span><strong>مکان:</strong> ${caseItem.location ? caseItem.location : "مکان مشخص نشده"}</span><br>
                                        <!-- دکمه پذیرفتن برای هر پرونده -->
                                        <button style="margin-top: 10px;" onclick="acceptCase(${caseItem.caseId})">پذیرفتن</button>
                                    </div>
                                `);
                            });
                        } else {
                            $('#caseList').append('<p>هیچ پرونده‌ای برای نمایش وجود ندارد.</p>');
                        }
                    },
                    error: function () {
                        alert('خطا در دریافت پرونده‌ها');
                    }
                });
            });

            // تابع به‌روزرسانی وضعیت وظیفه
            function updateTaskStatus(taskId, isDone) {
                console.log("TaskId inside updateTaskStatus: ", taskId);  // بررسی taskId در این تابع

                $.ajax({
                    url: '@Url.Action("UpdateTaskStatus", "Tasks")', // مسیر به‌روز شده برای متد UpdateTaskStatus
                    type: 'POST',
                    contentType: 'application/json',
                    dataType: 'json',  // اضافه کردن dataType
                    data: JSON.stringify({ taskId: taskId, isDone: isDone }), // ارسال داده‌ها به صورت JSON
                    success: function (response) {
                        console.log(response.message);  // پیغام موفقیت
                    },
                    error: function (xhr, status, error) {
                        console.error("Error:", error);  // نمایش خطا
                        alert("خطایی رخ داده است.");
                    }
                });
            }

            // تابع برای نمایش پیام‌های مربوط به هر وظیفه
            function viewTaskMessages(taskId) {
                console.log("TaskId in viewTaskMessages:", taskId); // چاپ taskId برای بررسی
                if (taskId && taskId !== 0) {
                    const url = `/Task/ViewTaskMessages/${taskId}`;
                    console.log("Redirecting to URL:", url); // چاپ URL
                    window.location.href = url;
                } else {
                    alert("Task ID is invalid");
                }
            }

            // تابع برای پذیرش پرونده
            function acceptCase(caseId) {
                console.log("Accepting case with ID:", caseId);
                // در اینجا می‌توانید درخواست‌هایی برای پردازش پرونده‌ها ارسال کنید.
            }
        </script>
}
